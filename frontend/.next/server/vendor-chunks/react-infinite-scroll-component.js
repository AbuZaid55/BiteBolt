"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-infinite-scroll-component";
exports.ids = ["vendor-chunks/react-infinite-scroll-component"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-infinite-scroll-component/dist/index.es.js":
/*!***********************************************************************!*\
  !*** ./node_modules/react-infinite-scroll-component/dist/index.es.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n    extendStatics(d, b);\n    function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n/* eslint-disable no-undefined,no-param-reassign,no-shadow */ /**\n * Throttle execution of a function. Especially useful for rate limiting\n * execution of handlers on events like resize and scroll.\n *\n * @param  {Number}    delay          A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n * @param  {Boolean}   [noTrailing]   Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds while the\n *                                    throttled-function is being called. If noTrailing is false or unspecified, callback will be executed one final time\n *                                    after the last throttled-function call. (After the throttled-function has not been called for `delay` milliseconds,\n *                                    the internal counter is reset)\n * @param  {Function}  callback       A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n *                                    to `callback` when the throttled-function is executed.\n * @param  {Boolean}   [debounceMode] If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is false (at end),\n *                                    schedule `callback` to execute after `delay` ms.\n *\n * @return {Function}  A new, throttled, function.\n */ function throttle(delay, noTrailing, callback, debounceMode) {\n    /*\n   * After wrapper has stopped being called, this timeout ensures that\n   * `callback` is executed at the proper times in `throttle` and `end`\n   * debounce modes.\n   */ var timeoutID;\n    var cancelled = false; // Keep track of the last time `callback` was executed.\n    var lastExec = 0; // Function to clear existing timeout\n    function clearExistingTimeout() {\n        if (timeoutID) {\n            clearTimeout(timeoutID);\n        }\n    } // Function to cancel next exec\n    function cancel() {\n        clearExistingTimeout();\n        cancelled = true;\n    } // `noTrailing` defaults to falsy.\n    if (typeof noTrailing !== \"boolean\") {\n        debounceMode = callback;\n        callback = noTrailing;\n        noTrailing = undefined;\n    }\n    /*\n   * The `wrapper` function encapsulates all of the throttling / debouncing\n   * functionality and when executed will limit the rate at which `callback`\n   * is executed.\n   */ function wrapper() {\n        var self = this;\n        var elapsed = Date.now() - lastExec;\n        var args = arguments;\n        if (cancelled) {\n            return;\n        } // Execute `callback` and update the `lastExec` timestamp.\n        function exec() {\n            lastExec = Date.now();\n            callback.apply(self, args);\n        }\n        /*\n     * If `debounceMode` is true (at begin) this is used to clear the flag\n     * to allow future `callback` executions.\n     */ function clear() {\n            timeoutID = undefined;\n        }\n        if (debounceMode && !timeoutID) {\n            /*\n       * Since `wrapper` is being called for the first time and\n       * `debounceMode` is true (at begin), execute `callback`.\n       */ exec();\n        }\n        clearExistingTimeout();\n        if (debounceMode === undefined && elapsed > delay) {\n            /*\n       * In throttle mode, if `delay` time has been exceeded, execute\n       * `callback`.\n       */ exec();\n        } else if (noTrailing !== true) {\n            /*\n       * In trailing throttle mode, since `delay` time has not been\n       * exceeded, schedule `callback` to execute `delay` ms after most\n       * recent execution.\n       *\n       * If `debounceMode` is true (at begin), schedule `clear` to execute\n       * after `delay` ms.\n       *\n       * If `debounceMode` is false (at end), schedule `callback` to\n       * execute after `delay` ms.\n       */ timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === undefined ? delay - elapsed : delay);\n        }\n    }\n    wrapper.cancel = cancel; // Return the wrapper function.\n    return wrapper;\n}\nvar ThresholdUnits = {\n    Pixel: \"Pixel\",\n    Percent: \"Percent\"\n};\nvar defaultThreshold = {\n    unit: ThresholdUnits.Percent,\n    value: 0.8\n};\nfunction parseThreshold(scrollThreshold) {\n    if (typeof scrollThreshold === \"number\") {\n        return {\n            unit: ThresholdUnits.Percent,\n            value: scrollThreshold * 100\n        };\n    }\n    if (typeof scrollThreshold === \"string\") {\n        if (scrollThreshold.match(/^(\\d*(\\.\\d+)?)px$/)) {\n            return {\n                unit: ThresholdUnits.Pixel,\n                value: parseFloat(scrollThreshold)\n            };\n        }\n        if (scrollThreshold.match(/^(\\d*(\\.\\d+)?)%$/)) {\n            return {\n                unit: ThresholdUnits.Percent,\n                value: parseFloat(scrollThreshold)\n            };\n        }\n        console.warn('scrollThreshold format is invalid. Valid formats: \"120px\", \"50%\"...');\n        return defaultThreshold;\n    }\n    console.warn(\"scrollThreshold should be string or number\");\n    return defaultThreshold;\n}\nvar InfiniteScroll = /** @class */ function(_super) {\n    __extends(InfiniteScroll, _super);\n    function InfiniteScroll(props) {\n        var _this = _super.call(this, props) || this;\n        _this.lastScrollTop = 0;\n        _this.actionTriggered = false;\n        // variables to keep track of pull down behaviour\n        _this.startY = 0;\n        _this.currentY = 0;\n        _this.dragging = false;\n        // will be populated in componentDidMount\n        // based on the height of the pull down element\n        _this.maxPullDownDistance = 0;\n        _this.getScrollableTarget = function() {\n            if (_this.props.scrollableTarget instanceof HTMLElement) return _this.props.scrollableTarget;\n            if (typeof _this.props.scrollableTarget === \"string\") {\n                return document.getElementById(_this.props.scrollableTarget);\n            }\n            if (_this.props.scrollableTarget === null) {\n                console.warn(\"You are trying to pass scrollableTarget but it is null. This might\\n        happen because the element may not have been added to DOM yet.\\n        See https://github.com/ankeetmaini/react-infinite-scroll-component/issues/59 for more info.\\n      \");\n            }\n            return null;\n        };\n        _this.onStart = function(evt) {\n            if (_this.lastScrollTop) return;\n            _this.dragging = true;\n            if (evt instanceof MouseEvent) {\n                _this.startY = evt.pageY;\n            } else if (evt instanceof TouchEvent) {\n                _this.startY = evt.touches[0].pageY;\n            }\n            _this.currentY = _this.startY;\n            if (_this._infScroll) {\n                _this._infScroll.style.willChange = \"transform\";\n                _this._infScroll.style.transition = \"transform 0.2s cubic-bezier(0,0,0.31,1)\";\n            }\n        };\n        _this.onMove = function(evt) {\n            if (!_this.dragging) return;\n            if (evt instanceof MouseEvent) {\n                _this.currentY = evt.pageY;\n            } else if (evt instanceof TouchEvent) {\n                _this.currentY = evt.touches[0].pageY;\n            }\n            // user is scrolling down to up\n            if (_this.currentY < _this.startY) return;\n            if (_this.currentY - _this.startY >= Number(_this.props.pullDownToRefreshThreshold)) {\n                _this.setState({\n                    pullToRefreshThresholdBreached: true\n                });\n            }\n            // so you can drag upto 1.5 times of the maxPullDownDistance\n            if (_this.currentY - _this.startY > _this.maxPullDownDistance * 1.5) return;\n            if (_this._infScroll) {\n                _this._infScroll.style.overflow = \"visible\";\n                _this._infScroll.style.transform = \"translate3d(0px, \" + (_this.currentY - _this.startY) + \"px, 0px)\";\n            }\n        };\n        _this.onEnd = function() {\n            _this.startY = 0;\n            _this.currentY = 0;\n            _this.dragging = false;\n            if (_this.state.pullToRefreshThresholdBreached) {\n                _this.props.refreshFunction && _this.props.refreshFunction();\n                _this.setState({\n                    pullToRefreshThresholdBreached: false\n                });\n            }\n            requestAnimationFrame(function() {\n                // this._infScroll\n                if (_this._infScroll) {\n                    _this._infScroll.style.overflow = \"auto\";\n                    _this._infScroll.style.transform = \"none\";\n                    _this._infScroll.style.willChange = \"unset\";\n                }\n            });\n        };\n        _this.onScrollListener = function(event) {\n            if (typeof _this.props.onScroll === \"function\") {\n                // Execute this callback in next tick so that it does not affect the\n                // functionality of the library.\n                setTimeout(function() {\n                    return _this.props.onScroll && _this.props.onScroll(event);\n                }, 0);\n            }\n            var target = _this.props.height || _this._scrollableNode ? event.target : document.documentElement.scrollTop ? document.documentElement : document.body;\n            // return immediately if the action has already been triggered,\n            // prevents multiple triggers.\n            if (_this.actionTriggered) return;\n            var atBottom = _this.props.inverse ? _this.isElementAtTop(target, _this.props.scrollThreshold) : _this.isElementAtBottom(target, _this.props.scrollThreshold);\n            // call the `next` function in the props to trigger the next data fetch\n            if (atBottom && _this.props.hasMore) {\n                _this.actionTriggered = true;\n                _this.setState({\n                    showLoader: true\n                });\n                _this.props.next && _this.props.next();\n            }\n            _this.lastScrollTop = target.scrollTop;\n        };\n        _this.state = {\n            showLoader: false,\n            pullToRefreshThresholdBreached: false,\n            prevDataLength: props.dataLength\n        };\n        _this.throttledOnScrollListener = throttle(150, _this.onScrollListener).bind(_this);\n        _this.onStart = _this.onStart.bind(_this);\n        _this.onMove = _this.onMove.bind(_this);\n        _this.onEnd = _this.onEnd.bind(_this);\n        return _this;\n    }\n    InfiniteScroll.prototype.componentDidMount = function() {\n        if (typeof this.props.dataLength === \"undefined\") {\n            throw new Error('mandatory prop \"dataLength\" is missing. The prop is needed' + \" when loading more content. Check README.md for usage\");\n        }\n        this._scrollableNode = this.getScrollableTarget();\n        this.el = this.props.height ? this._infScroll : this._scrollableNode || window;\n        if (this.el) {\n            this.el.addEventListener(\"scroll\", this.throttledOnScrollListener);\n        }\n        if (typeof this.props.initialScrollY === \"number\" && this.el && this.el instanceof HTMLElement && this.el.scrollHeight > this.props.initialScrollY) {\n            this.el.scrollTo(0, this.props.initialScrollY);\n        }\n        if (this.props.pullDownToRefresh && this.el) {\n            this.el.addEventListener(\"touchstart\", this.onStart);\n            this.el.addEventListener(\"touchmove\", this.onMove);\n            this.el.addEventListener(\"touchend\", this.onEnd);\n            this.el.addEventListener(\"mousedown\", this.onStart);\n            this.el.addEventListener(\"mousemove\", this.onMove);\n            this.el.addEventListener(\"mouseup\", this.onEnd);\n            // get BCR of pullDown element to position it above\n            this.maxPullDownDistance = this._pullDown && this._pullDown.firstChild && this._pullDown.firstChild.getBoundingClientRect().height || 0;\n            this.forceUpdate();\n            if (typeof this.props.refreshFunction !== \"function\") {\n                throw new Error('Mandatory prop \"refreshFunction\" missing.\\n          Pull Down To Refresh functionality will not work\\n          as expected. Check README.md for usage\\'');\n            }\n        }\n    };\n    InfiniteScroll.prototype.componentWillUnmount = function() {\n        if (this.el) {\n            this.el.removeEventListener(\"scroll\", this.throttledOnScrollListener);\n            if (this.props.pullDownToRefresh) {\n                this.el.removeEventListener(\"touchstart\", this.onStart);\n                this.el.removeEventListener(\"touchmove\", this.onMove);\n                this.el.removeEventListener(\"touchend\", this.onEnd);\n                this.el.removeEventListener(\"mousedown\", this.onStart);\n                this.el.removeEventListener(\"mousemove\", this.onMove);\n                this.el.removeEventListener(\"mouseup\", this.onEnd);\n            }\n        }\n    };\n    InfiniteScroll.prototype.componentDidUpdate = function(prevProps) {\n        // do nothing when dataLength is unchanged\n        if (this.props.dataLength === prevProps.dataLength) return;\n        this.actionTriggered = false;\n        // update state when new data was sent in\n        this.setState({\n            showLoader: false\n        });\n    };\n    InfiniteScroll.getDerivedStateFromProps = function(nextProps, prevState) {\n        var dataLengthChanged = nextProps.dataLength !== prevState.prevDataLength;\n        // reset when data changes\n        if (dataLengthChanged) {\n            return __assign(__assign({}, prevState), {\n                prevDataLength: nextProps.dataLength\n            });\n        }\n        return null;\n    };\n    InfiniteScroll.prototype.isElementAtTop = function(target, scrollThreshold) {\n        if (scrollThreshold === void 0) {\n            scrollThreshold = 0.8;\n        }\n        var clientHeight = target === document.body || target === document.documentElement ? window.screen.availHeight : target.clientHeight;\n        var threshold = parseThreshold(scrollThreshold);\n        if (threshold.unit === ThresholdUnits.Pixel) {\n            return target.scrollTop <= threshold.value + clientHeight - target.scrollHeight + 1;\n        }\n        return target.scrollTop <= threshold.value / 100 + clientHeight - target.scrollHeight + 1;\n    };\n    InfiniteScroll.prototype.isElementAtBottom = function(target, scrollThreshold) {\n        if (scrollThreshold === void 0) {\n            scrollThreshold = 0.8;\n        }\n        var clientHeight = target === document.body || target === document.documentElement ? window.screen.availHeight : target.clientHeight;\n        var threshold = parseThreshold(scrollThreshold);\n        if (threshold.unit === ThresholdUnits.Pixel) {\n            return target.scrollTop + clientHeight >= target.scrollHeight - threshold.value;\n        }\n        return target.scrollTop + clientHeight >= threshold.value / 100 * target.scrollHeight;\n    };\n    InfiniteScroll.prototype.render = function() {\n        var _this = this;\n        var style = __assign({\n            height: this.props.height || \"auto\",\n            overflow: \"auto\",\n            WebkitOverflowScrolling: \"touch\"\n        }, this.props.style);\n        var hasChildren = this.props.hasChildren || !!(this.props.children && this.props.children instanceof Array && this.props.children.length);\n        // because heighted infiniteScroll visualy breaks\n        // on drag down as overflow becomes visible\n        var outerDivStyle = this.props.pullDownToRefresh && this.props.height ? {\n            overflow: \"auto\"\n        } : {};\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            style: outerDivStyle,\n            className: \"infinite-scroll-component__outerdiv\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            className: \"infinite-scroll-component \" + (this.props.className || \"\"),\n            ref: function(infScroll) {\n                return _this._infScroll = infScroll;\n            },\n            style: style\n        }, this.props.pullDownToRefresh && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            style: {\n                position: \"relative\"\n            },\n            ref: function(pullDown) {\n                return _this._pullDown = pullDown;\n            }\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            style: {\n                position: \"absolute\",\n                left: 0,\n                right: 0,\n                top: -1 * this.maxPullDownDistance\n            }\n        }, this.state.pullToRefreshThresholdBreached ? this.props.releaseToRefreshContent : this.props.pullDownToRefreshContent)), this.props.children, !this.state.showLoader && !hasChildren && this.props.hasMore && this.props.loader, this.state.showLoader && this.props.hasMore && this.props.loader, !this.props.hasMore && this.props.endMessage));\n    };\n    return InfiniteScroll;\n}(react__WEBPACK_IMPORTED_MODULE_0__.Component);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (InfiniteScroll); //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-infinite-scroll-component/dist/index.es.js\n");

/***/ })

};
;